[
  {
    "objectID": "Take-home/Take-home_ex1/tkx01.html",
    "href": "Take-home/Take-home_ex1/tkx01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "📖 Introduction\nIn Singapore, the residential property market is bifurcated into public and private sectors. The public housing sector serves households with a monthly income of up to S$14,000, aiming to offer affordable housing solutions to the broader community. In contrast, the private housing sector caters to households with incomes surpassing S$14,000.\nFor this analysis, we will leverage REALIS transaction data covering the period from 1st January 2023 to 31st March 2024. Our exploration will be conducted using ggplot2 and its associated extensions.\n\n\nSetting the Scene\nIn this scenario, we assume the role of a graphical editor for a media company. We have been tasked with creating data visualizations to illuminate the private residential market and its sub-markets in Singapore for the first quarter of 2024.\n\n\nData Preparation\nLoad R Packages\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales,\n               viridis, cowplot, \n               dplyr, plotly,\n               tidyr, lubridate, \n               ggplot2, ggExtra)\n\nIdentify the missing values in the data set and removed any missing elements. ‘Type of Sale’ and ‘Property type’ has been converted to factor format. ‘Transacted Price ($)’ and ‘Area (SQFT)’ are converted to numeric data types. ‘Type of Sale’ has been group into three categories. ‘Sale Date’ has been converted to Date format.\nThe process had been repeated for all five data sets.\n\nImport Data SetsConverting DataConverting Dates\n\n\n\nds1 &lt;- read_csv(\"data/ds1.csv\")\nds2 &lt;- read_csv(\"data/ds2.csv\")\nds3 &lt;- read_csv(\"data/ds3.csv\")\nds4 &lt;- read_csv(\"data/ds4.csv\")\nds5 &lt;- read_csv(\"data/ds5.csv\")\n\n\n\n\nprepare_dataset &lt;- function(ds) {\n  colSums(is.na(ds))\n  ds &lt;- na.omit(ds)\n  \n  ds$`Type of Sale` &lt;- tolower(as.character(ds$`Type of Sale`))\n  ds$`Type of Sale` &lt;- ifelse(ds$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds$`Type of Sale`, \"other\")\n  ds$`Type of Sale` &lt;- as.factor(ds$`Type of Sale`)\n  \n  ds$`Property Type` &lt;- as.factor(ds$`Property Type`)\n  \n  ds$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Transacted Price ($)`, perl = TRUE))\n  ds$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Area (SQFT)`, perl = TRUE))\n  ds$`Unit Price ($ PSF)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds$`Unit Price ($ PSF)`, perl = TRUE))\n  \n  return(ds)\n}\n\n# Apply the function to each dataset\nds1 &lt;- prepare_dataset(ds1)\nds2 &lt;- prepare_dataset(ds2)\nds3 &lt;- prepare_dataset(ds3)\nds4 &lt;- prepare_dataset(ds4)\nds5 &lt;- prepare_dataset(ds5)\n\n# Combine the datasets\ncombined_ds &lt;- rbind(ds1, ds2, ds3, ds4, ds5)\n\n\n\n\n# Convert Sale Date to Date format\nds1$`Sale Date` &lt;- dmy(ds1$`Sale Date`)\nds2$`Sale Date` &lt;- dmy(ds2$`Sale Date`)\nds3$`Sale Date` &lt;- dmy(ds3$`Sale Date`)\nds4$`Sale Date` &lt;- dmy(ds4$`Sale Date`)\nds5$`Sale Date` &lt;- dmy(ds5$`Sale Date`)\n\n\n\n\n\n\nEDA\nIn this section, we will visualize the relationships between Property Types vs. Planning Region and Sale trend from Jan 2023 - Mar 2024.\n\nTransactions by Regions and Property TypeTransactions by MonthPurchaser Address IndicatorSale Categories vs. Property Types\n\n\n\n\nClick to show code\n\n\ntransactions_heatmap &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`, `Property Type`) %&gt;%\n  summarise(Transactions = n()) %&gt;%\n  ungroup()\n\nheatmap1 &lt;- ggplot(transactions_heatmap, aes(x = `Planning Region`, y = `Property Type`, fill = Transactions)) +\n  geom_tile() +\n  labs(title = \"Heatmap of Transactions by Region and Property Type\",\n       x = \"Region\",\n       y = \"Property Type\") +\n  scale_fill_viridis_c()\n\n\n\n\n\n\nClick to show code\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\n\n# Combine all datasets into one dataframe\ncombined_ds &lt;- bind_rows(ds1, ds2, ds3, ds4, ds5)\n\n# Pre-process the combined dataset\ncombined_ds$`Sale Date` &lt;- as.Date(combined_ds$`Sale Date`, format = \"%Y-%m-%d\")\ncombined_ds$Year &lt;- year(combined_ds$`Sale Date`)\ncombined_ds$Month &lt;- factor(format(combined_ds$`Sale Date`, \"%b\"), levels = month.abb)\ncombined_ds$`Number of Units` &lt;- as.numeric(combined_ds$`Number of Units`)\n\n# Summarize data to get total units sold by month and year\nmonthly_sales_combined &lt;- combined_ds %&gt;%\n  group_by(Year, Month) %&gt;%\n  summarise(Units_Sold = sum(`Number of Units`, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(Month = factor(Month, levels = month.abb)) # Ensure months are in the correct order\n\n# Create a single bar chart with month and year\nbarchart1 &lt;- ggplot(monthly_sales_combined, aes(x = Month, y = Units_Sold, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_x_discrete(drop = FALSE) + # Ensures all months are shown\n  labs(title = \"Total Number of Units Sold by Month and Year\",\n       x = \"Month\",\n       y = \"Number of Units Sold\",\n       fill = \"Year\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"bottom\")\n\n\n\n\n\n\nClick to show code\n\n\npercentage_data &lt;- combined_ds %&gt;%\n  group_by(`Property Type`, `Purchaser Address Indicator`) %&gt;%\n  summarise(Count = n()) %&gt;%\n  group_by(`Property Type`) %&gt;%\n  mutate(Percentage = (Count / sum(Count)) * 100) %&gt;%\n  ungroup()\nplot &lt;- ggplot(percentage_data, aes(x = `Property Type`, y = Percentage, fill = `Purchaser Address Indicator`)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = sprintf(\"%.1f%%\", Percentage)), \n            position = position_stack(vjust = 0.5), \n            size = 3, \n            color = \"black\") +\n  labs(\n    title = \"Percentage of Purchaser Address Indicator by Property Type\",\n    x = \"Property Type\",\n    y = \"Percentage (%)\",\n    fill = \"Purchaser Address Indicator\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )\n\n\n\n\n\n\nClick to show code\n\n\ncounts &lt;- table(combined_ds$`Type of Sale`, combined_ds$`Property Type`)\npercentages &lt;- prop.table(counts, margin = 1) * 100 \n\ndf_percentages &lt;- as.data.frame(as.table(percentages))\n\nbarchart &lt;- ggplot(df_percentages, aes(x = Var1, y = Freq, fill = Var2)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_text(aes(label = sprintf(\"%.1f%%\", Freq)), position = position_dodge(width = 0.9), vjust = -0.5, size = 2) +  \n  labs(title = \"Comparing Property Types Across Sale Categories\",\n       x = \"Sale Categories\",\n       y = \"Percentage (%)\", \n       fill = \"Property Type\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") \n\n\n\n\n\n\n\nClick to show code\n\n\n# Adjust text size for the bar chart\nbarchart1 &lt;- barchart1 + theme(\n  plot.title = element_text(size = 8),      # Adjust title size\n  axis.title = element_text(size = 8),       # Adjust axis titles size\n  axis.text.x = element_text(size = 6, angle = 45, hjust = 1), # Adjust x axis text size\n  axis.text.y = element_text(size = 6),      # Adjust y axis text size\n  legend.text = element_text(size = 6)       # Adjust legend text size\n)\n\n# Adjust text size for the heatmap\n# Adjust the heatmap to move the legend to the bottom\nheatmap1 &lt;- heatmap1 + theme(\n  plot.title = element_text(size = 8), \n  axis.text.x = element_text(size = 6, angle = 45, hjust = 1), # Adjust x axis text size\n  axis.text.y = element_text(size = 6), \n  legend.position = \"bottom\",\n  legend.text = element_text(size = 6, angle = 45, hjust = 1),       # Adjust legend text size if necessary\n  legend.title = element_text(size = 6)       # Adjust legend title size if necessary\n)\n\n# Adjusting theme settings for barchart\nbarchart &lt;- barchart + theme(\n  plot.title = element_text(size = 8),  # Smaller plot title\n  axis.title = element_text(size = 8),   # Smaller axis titles\n  axis.text = element_text(size = 6),    # Smaller axis text\n  legend.text = element_text(size = 6),  # Smaller legend text\n  legend.title = element_text(size = 6)  # Smaller legend title\n)\n\n# Adjusting theme settings for plot\nplot &lt;- plot + theme(\n  plot.title = element_text(size = 8),\n  axis.title = element_text(size = 8),\n  axis.text = element_text(size = 6),\n  legend.text = element_text(size = 6),\n  legend.title = element_text(size = 8)\n)\n\n# Now combine the plots using patchwork\ncombined_plot2 &lt;- (barchart | plot) +\n  plot_layout(widths = c(1, 1))  # Adjust the relative widths if necessary\n\n# Print the combined plot\nprint(combined_plot2)\n\n\n\n\n\nAccording to REALIS data dictionary, ‘Purchaser Address Indicator’ refers to the type of residence (either HDB flat or private property) associated with the purchaser’s address as indicated in the caveat. It doesn’t necessarily imply ownership but rather reflects the type of housing the purchaser resides in. If this information is unavailable, it’s marked as ‘N.A’.\n\ncombined_plot &lt;- barchart1 + heatmap1 + \n  plot_layout(widths = c(0.1, 0.1)) # Adjust the width ratio as needed\nprint(combined_plot)\n\n\n\ncombined_plot2 &lt;- (barchart | plot) +\n  plot_layout(widths = c(1, 1.5)) \nprint(combined_plot2)\n\n\n\n\n\n📈 Insight: \n\nPrivate property sales surge in Jul 2023 due to several big launches on the market and developers sold 1412 units in July compared to 278 in June. Read more.\nCentral Region Apartments are the most sought after in the market according to the heatmap, followed by condominiums. -In the new sale market, apartments represent 61% of sales, while condominiums make up 24.5%.\nIn contrast, the resale market sees condominiums accounting for 48% and apartments at 27.2%. Detached, semi-detached, and terrace houses are less prevalent in both markets. This is attributed to land scarcity and high construction costs imposed by the Singapore government. Furthermore, many property owners retain these types of properties due to their freehold tenure.\nIt’s notable that a significant majority of private property buyers (presumably those residing in these properties) live in private residences. Interestingly, executive condominiums have the highest proportion of purchasers with HDB addresses, accounting for 53.6%. This could be attributed to the attractive rental yields in Singapore. Consequently, more residents might be purchasing executive condominiums primarily as investment properties.\n\n\n\n\nEDA 2\nWe analyzed unit price ($PSF) across Singapore’s planning regions for 2023, using four quarterly charts to visualize regional price variations. The Central Region consistently showed the highest median PSF, indicating its premium status. In contrast, the North East and East Regions maintained stable PSF values, balancing affordability with location.\n\n\nClick to show code\n\n\nq4 &lt;- ggplot(ds2, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Oct 23 - Dec 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n# Price per Square Foot by Planning Region in DS3\nq3 &lt;- ggplot(ds3, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Jul 23 - Sep 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n# Price per Square Foot by Planning Region in DS4\nq2 &lt;- ggplot(ds4, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Apr 23 - Jun 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n# Price per Square Foot by Planning Region in DS5\nq1 &lt;- ggplot(ds5, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Jan 23 - Mar 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n\n\ncombined_plot &lt;- wrap_plots(q1, q2, q3, q4)\ncombined_plot\n\n\n\n\n\n\nClick to show code\n\n\ncombined_ds &lt;- bind_rows(\n  ds1 %&gt;% mutate(Data_Source = \"data/ds1.csv\"),\n  ds2 %&gt;% mutate(Data_Source = \"data/ds2.csv\"),\n  ds3 %&gt;% mutate(Data_Source = \"data/ds3.csv\"),\n  ds4 %&gt;% mutate(Data_Source = \"data/ds4.csv\"),\n  ds5 %&gt;% mutate(Data_Source = \"data/ds5.csv\"),\n)\n\nsummary_stats &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`) %&gt;%\n  summarise(\n    median_PSF = median(`Unit Price ($ PSF)`, na.rm = TRUE),\n    lower_quartile = quantile(`Unit Price ($ PSF)`, 0.25, na.rm = TRUE),\n    upper_quartile = quantile(`Unit Price ($ PSF)`, 0.75, na.rm = TRUE)\n  )\n\np &lt;- ggplot(combined_ds, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  stat_summary(\n    fun = median,\n    geom = \"point\",\n    shape = 23,\n    size = 3,\n    color = \"blue\",\n    position = position_dodge(width = 0.75)\n  ) +\n  labs(\n    title = \"Distribution of Price per Square Foot by Planning Region - 2023 Q1-Q4\",\n    x = \"Planning Region\",\n    y = \"Unit Price ($ PSF)\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\np_plotly &lt;- ggplotly(p, tooltip = c(\"Planning Region\", \"y\", \"Data_Source\", \"median_PSF\", \"lower_quartile\", \"upper_quartile\"))\n\np_plotly &lt;- plotly::ggplotly(p, tooltip = c(\"Planning Region\", \"y\", \"Data_Source\", \"median_PSF\", \"lower_quartile\", \"upper_quartile\"))\n\n\n\np_plotly\n\n\n\n\n\n\n📈 Insight:  Each region in Singapore offers a unique property market landscape catering to different buyer preferences and budgets.  The Central Region stands out as a high-end market, while the East offers premium properties at better values. The North East and North Regions provide a mix of affordability and mid-range options, whereas the West Region offers diversity without extreme price outliers."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "-",
    "section": "",
    "text": "ISSS608-Visual Analytics and Application\n“We’re entering a new world in which data may be more important than software.”\n- Tim O’Reilly\nAbout"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;-read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis,\n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "Hands-on_exercise/Hands-on_ex1/Hands-on_Ex01.html",
    "href": "Hands-on_exercise/Hands-on_ex1/Hands-on_Ex01.html",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Getting Started\nLoad and Install R packages\n\npacman::p_load(tidyverse, forcats)\n\n\n\nImport Data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n#Introductions to ggplot The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nBar chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nDot Plot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\nHistogram\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\nchanging aes()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") \n\n\n\n\n\n\nggplot2: geom\ngeom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()         \n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()        \n\n\n\n\ngeom_boxplot\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()  \n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\ngeom_violin\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\ngeom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()     \n\n\n\n\ncombining geom objects\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\nStatistics Functions\nThe Statistics functions statistically transform data, usually as some form of summary.\nUsing stat_summary() function to over ride the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)     \n\n\n\n\nAdding best curve on a scatterplot using geom_smooth\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\nWithout using geom_smooth\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\nOverriding default smoothing method\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n\n\n\n\n\nggplot2: facets\nfacet_wrap()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\nfacet_grid()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\nggplot 2: coordinates\nBy the default, the bar chart of ggplot2 is in vertical form. The code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\nChanging the y- and x- axis range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\nUsing Themes\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Lin Guan Jhen, Elise\nISSS608 Visual Analytics and Applications under Prof. Kam Tin Seong as part of Singapore Management University Master of IT in business.\nLinkedIn | Email"
  },
  {
    "objectID": "Hands-on_exercise/Hands-on_ex2/Hands-on_Ex02.html",
    "href": "Hands-on_exercise/Hands-on_ex2/Hands-on_Ex02.html",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Getting Started\nLoad and Install the required R packages\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\nImport Data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\nAnnotation: ggrepel\nCompare when using annotation\n\n\n\n\nwithout ggrepelwith ggrepel\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5, \n              formula = y~x) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nggplot2 Themes\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"yellow2\", \n                 fill=\"grey60\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\nggtheme package\nUsing different themes\n\n\n\n\neconomistwsjsolarised\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_solarized()\n\n\n\n\n\n\n\n\n\nCombining Graphs\nStep 1: Create single graphs\n\n\n\n\n123\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\np3 &lt;-  \n  ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nStep 2: Combining\n\n(p1 / p2) | p3\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_exercise/Hands-on_ex4/Hands-on_Ex04.html",
    "href": "Hands-on_exercise/Hands-on_ex4/Hands-on_Ex04.html",
    "title": "ISSS608",
    "section": "",
    "text": "Please update…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, ggthemes, \n               tidyverse, ggridges) \n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nexam_df &lt;- read_csv(\"Exam_data.csv\")\nsummary(exam_df)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\nUsing the steps you have learned, build a histogram\n\nggplot(data=exam_df, \n       aes(x = ENGLISH)) +\ngeom_histogram(bins=30,            \n                 color=\"black\",      \n                 fill=\"light blue\") \n\n\n\n\nProbability Density Plot\n\nggplot(data=exam_df, \n       aes(x = ENGLISH)) +\n  geom_density(\n     color = \"#1696d2\",\n     adjust = .54,\n     alpha = .6\n  )\n\n\n\n\nThe alternative design\n\nmedian_eng &lt;- median(exam_df$ENGLISH)\nmean_eng &lt;- mean(exam_df$ENGLISH)\nstd_eng &lt;- (exam_df$ENGLISH)\n\nggplot(exam_df,\n       aes(x= ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6) +\n  stat_function(\n    fun = dnorm, \n    args = list(mean = mean_eng,\n                sd = std_eng),\n    col = \"grey10\",\n    size = .8) +\n  geom_vline(\n    aes(xintercept = mean_eng), \n    color=\"#4d5887\",\n    linewidth = .6,\n    linetype = \"dashed\") +\n  annotate(geom=\"text\", \n           x = mean_eng - 8,\n           y = 0.04, \n           label = paste0(\"Mean ENGLISH: \",round((mean_eng),2)),\n           color = \"#4d5887\")\n\n\n\n    geom_vline()\n\ngeom_vline: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity"
  },
  {
    "objectID": "Take-home/Take-home_ex1/Take-home_x01.html",
    "href": "Take-home/Take-home_ex1/Take-home_x01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Introduction\nIn Singapore, the residential property market is divided into public and private sectors. Public housing caters to households with a monthly income of less than or equal to S$14,000, aiming to provide affordable housing for the general populace. Conversely, the private housing market serves households with incomes exceeding S$14,000.\nFor this exercise, we’ll be utilizing REALIS transaction data spanning from 1st January 2023 to 31st March 2024 and explore the data sets using ggplot2 and its extensions.\n\n\nSetting the Scenes\nWe will be assuming the role of a graphical editor of a media company and had been requested to prepare two to three data visualization to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.\n\n\nData Preparation\nLoad R Packages\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales)\npacman::p_load(HH, tidyverse)\n\nImport the 5 data sets\n\nds1 &lt;- read_csv(\"data/ds1.csv\")\nds2 &lt;- read_csv(\"data/ds2.csv\")\nds3 &lt;- read_csv(\"data/ds3.csv\")\nds4 &lt;- read_csv(\"data/ds4.csv\")\nds5 &lt;- read_csv(\"data/ds5.csv\")\n\nMissing values had been removed to prevent parsing issues, to ensure that the data types matches the actual data some columns had been converted. Sale Date and Completion Date columns had been changed to as.Date format and Type of Sale, Property Type had been changed from char to factor data type.\nFor numeric columns, remove any non-numeric characters or replace them with appropriate values. For categorical columns, ensure consistent naming and handle any inconsistent or misspelled categories. After cleaning, validate the data to ensure that all inconsistencies and anomalies have been addressed.\nThe process had been repeated for all five data sets.\n\nds1ds2ds3ds4ds5\n\n\n\ncolSums(is.na(ds1))\n\n               Project Name        Transacted Price ($) \n                          0                           0 \n                Area (SQFT)          Unit Price ($ PSF) \n                          0                           0 \n                  Sale Date                     Address \n                          0                           0 \n               Type of Sale                Type of Area \n                          0                           0 \n                 Area (SQM)          Unit Price ($ PSM) \n                          0                           0 \n              Nett Price($)               Property Type \n                          0                           0 \n            Number of Units                      Tenure \n                          0                           0 \n            Completion Date Purchaser Address Indicator \n                          0                           0 \n                Postal Code             Postal District \n                          0                           0 \n              Postal Sector             Planning Region \n                          0                           0 \n              Planning Area \n                          0 \n\nds1 &lt;- na.omit(ds1)\n\nds1$`Type of Sale` &lt;- as.factor(ds1$`Type of Sale`)\nds1$`Property Type` &lt;- as.factor(ds1$`Property Type`)\nds1$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds1$`Transacted Price ($)`, perl = TRUE))\nds1$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds1$`Area (SQFT)`, perl = TRUE))\nds1$`Type of Sale` &lt;- tolower(ds1$`Type of Sale`)\nds1$`Type of Sale` &lt;- ifelse(ds1$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds1$`Type of Sale`, \"other\")\n\n\n\n\ncolSums(is.na(ds2))\n\n               Project Name        Transacted Price ($) \n                          0                           0 \n                Area (SQFT)          Unit Price ($ PSF) \n                          0                           0 \n                  Sale Date                     Address \n                          0                           0 \n               Type of Sale                Type of Area \n                          0                           0 \n                 Area (SQM)          Unit Price ($ PSM) \n                          0                           0 \n              Nett Price($)               Property Type \n                          0                           0 \n            Number of Units                      Tenure \n                          0                           0 \n            Completion Date Purchaser Address Indicator \n                          0                           0 \n                Postal Code             Postal District \n                          0                           0 \n              Postal Sector             Planning Region \n                          0                           0 \n              Planning Area \n                          0 \n\nds2 &lt;- na.omit(ds2)\n\nds2$`Type of Sale` &lt;- as.factor(ds2$`Type of Sale`)\nds2$`Property Type` &lt;- as.factor(ds2$`Property Type`)\nds2$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds2$`Transacted Price ($)`, perl = TRUE))\nds2$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds2$`Area (SQFT)`, perl = TRUE))\nds2$`Type of Sale` &lt;- tolower(ds2$`Type of Sale`)\nds2$`Type of Sale` &lt;- ifelse(ds2$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds2$`Type of Sale`, \"other\")\n\n\n\n\ncolSums(is.na(ds3))\n\n               Project Name        Transacted Price ($) \n                          0                           0 \n                Area (SQFT)          Unit Price ($ PSF) \n                          0                           0 \n                  Sale Date                     Address \n                          0                           0 \n               Type of Sale                Type of Area \n                          0                           0 \n                 Area (SQM)          Unit Price ($ PSM) \n                          6                           0 \n              Nett Price($)               Property Type \n                          0                           0 \n            Number of Units                      Tenure \n                          0                           0 \n            Completion Date Purchaser Address Indicator \n                          0                           0 \n                Postal Code             Postal District \n                          0                           0 \n              Postal Sector             Planning Region \n                          0                           0 \n              Planning Area \n                          0 \n\nds3 &lt;- na.omit(ds3)\n\nds3$`Type of Sale` &lt;- as.factor(ds3$`Type of Sale`)\nds3$`Property Type` &lt;- as.factor(ds3$`Property Type`)\nds3$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds3$`Transacted Price ($)`, perl = TRUE))\nds3$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds3$`Area (SQFT)`, perl = TRUE))\nds3$`Type of Sale` &lt;- tolower(ds3$`Type of Sale`)\nds3$`Type of Sale` &lt;- ifelse(ds3$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds3$`Type of Sale`, \"other\")\n\n\n\n\ncolSums(is.na(ds4))\n\n               Project Name        Transacted Price ($) \n                          0                           0 \n                Area (SQFT)          Unit Price ($ PSF) \n                          0                           0 \n                  Sale Date                     Address \n                          0                           0 \n               Type of Sale                Type of Area \n                          0                           0 \n                 Area (SQM)          Unit Price ($ PSM) \n                          0                           0 \n              Nett Price($)               Property Type \n                          0                           0 \n            Number of Units                      Tenure \n                          0                           0 \n            Completion Date Purchaser Address Indicator \n                          0                           0 \n                Postal Code             Postal District \n                          0                           0 \n              Postal Sector             Planning Region \n                          0                           0 \n              Planning Area \n                          0 \n\nds4 &lt;- na.omit(ds4)\n\nds4$`Type of Sale` &lt;- as.factor(ds4$`Type of Sale`)\nds4$`Property Type` &lt;- as.factor(ds4$`Property Type`)\nds4$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds4$`Transacted Price ($)`, perl = TRUE))\nds4$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds4$`Area (SQFT)`, perl = TRUE))\nds4$`Type of Sale` &lt;- tolower(ds4$`Type of Sale`)\nds4$`Type of Sale` &lt;- ifelse(ds4$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds4$`Type of Sale`, \"other\")\n\n\n\n\ncolSums(is.na(ds5))\n\n               Project Name        Transacted Price ($) \n                          0                           0 \n                Area (SQFT)          Unit Price ($ PSF) \n                          0                           0 \n                  Sale Date                     Address \n                          0                           0 \n               Type of Sale                Type of Area \n                          0                           0 \n                 Area (SQM)          Unit Price ($ PSM) \n                          0                           0 \n              Nett Price($)               Property Type \n                          0                           0 \n            Number of Units                      Tenure \n                          0                           0 \n            Completion Date Purchaser Address Indicator \n                          0                           0 \n                Postal Code             Postal District \n                          0                           0 \n              Postal Sector             Planning Region \n                          0                           0 \n              Planning Area \n                          0 \n\nds5 &lt;- na.omit(ds5)\n\nds5$`Type of Sale` &lt;- as.factor(ds5$`Type of Sale`)\nds5$`Property Type` &lt;- as.factor(ds5$`Property Type`)\nds5$`Transacted Price ($)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds5$`Transacted Price ($)`, perl = TRUE))\nds5$`Area (SQFT)` &lt;- as.numeric(gsub(\"[^0-9.]\", \"\", ds5$`Area (SQFT)`, perl = TRUE))\nds5$`Type of Sale` &lt;- tolower(ds5$`Type of Sale`)\nds5$`Type of Sale` &lt;- ifelse(ds5$`Type of Sale` %in% c(\"new sale\", \"resale\"), ds5$`Type of Sale`, \"other\")\n\n\n\n\n\n\nEDA 1 Exploring relationship between planning area and unit price ($psf)\nWe have four charts depicting unit price ($ psf) to planning regions in Singapore through 2023 according to the 4 different quarters. By comparing the graphs, we can see the regional price variations in different quarters of the year.\nCentral Region show the highest median PSF throughout the year, indicating its status as a premium location. North East Region and East Region have stable PSF values, offering a balance between affordability and location.\n\n\nClick to show code\n\n\nlibrary(ggplot2)\nlibrary(cowplot)\n\n# Price per Square Foot by Planning Region in DS2\nq4 &lt;- ggplot(ds2, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Oct 23 - Dec 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n# Price per Square Foot by Planning Region in DS3\nq3 &lt;- ggplot(ds3, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Jul 23 - Sep 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n# Price per Square Foot by Planning Region in DS4\nq2 &lt;- ggplot(ds4, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Apr 23 - Jun 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n# Price per Square Foot by Planning Region in DS5\nq1 &lt;- ggplot(ds5, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  labs(title = \"Price per Square Foot by Planning Region - Jan 23 - Mar 23\",\n       x = \"Planning Region\",\n       y = \"Unit Price ($ PSF)\") +\n  theme(text = element_text(size = 6)) \n\n\n\nCombined the plots\n\n# Combine the plots using wrap_plots\ncombined_plot &lt;- wrap_plots(q1, q2, q3, q4, ncol = 2)\n# Display the combined plot\ncombined_plot\n\n\n\n\nNext, we combined the data sets and see the graph from 2023 Q1 - Q4 boxplot.\n\n# Load required libraries\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Combine the datasets into a single dataset\ncombined_ds &lt;- bind_rows(\n  ds1 %&gt;% mutate(Data_Source = \"data/ds1.csv\"),\n  ds2 %&gt;% mutate(Data_Source = \"data/ds2.csv\"),\n  ds3 %&gt;% mutate(Data_Source = \"data/ds3.csv\"),\n  ds4 %&gt;% mutate(Data_Source = \"data/ds4.csv\"),\n  ds5 %&gt;% mutate(Data_Source = \"data/ds5.csv\"),\n)\n\n# Calculate median and IQR by Planning Region\nsummary_stats &lt;- combined_ds %&gt;%\n  group_by(`Planning Region`) %&gt;%\n  summarise(\n    median_PSF = median(`Unit Price ($ PSF)`, na.rm = TRUE),\n    lower_quartile = quantile(`Unit Price ($ PSF)`, 0.25, na.rm = TRUE),\n    upper_quartile = quantile(`Unit Price ($ PSF)`, 0.75, na.rm = TRUE)\n  )\n\n# Create a boxplot for Price per Square Foot by Planning Region\np &lt;- ggplot(combined_ds, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +\n  geom_boxplot() +\n  stat_summary(\n    fun = median,\n    geom = \"point\",\n    shape = 23,\n    size = 3,\n    color = \"blue\",\n    position = position_dodge(width = 0.75)\n  ) +\n  labs(\n    title = \"Distribution of Price per Square Foot by Planning Region - 2023 Q1-Q4\",\n    x = \"Planning Region\",\n    y = \"Unit Price ($ PSF)\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot to plotly object for interactivity\np_plotly &lt;- ggplotly(p, tooltip = c(\"Planning Region\", \"y\", \"Data_Source\", \"median_PSF\", \"lower_quartile\", \"upper_quartile\"))\n\n# Convert ggplot to plotly object for interactivity\np_plotly &lt;- plotly::ggplotly(p, tooltip = c(\"Planning Region\", \"y\", \"Data_Source\", \"median_PSF\", \"lower_quartile\", \"upper_quartile\"))\n\n\n# Display the interactive plot\np_plotly\n\n\n\n\n\n\n#*Insights from Visualisations** -xx - xx - xx\n\n\n\nEDA 2\n\n# Load required libraries\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(ggplot2)\n\n# Check unique values in Sale Date\nunique(ds1$`Sale Date`)\n\n [1] \"01 Jan 2024\" \"02 Jan 2024\" \"03 Jan 2024\" \"04 Jan 2024\" \"05 Jan 2024\"\n [6] \"06 Jan 2024\" \"07 Jan 2024\" \"08 Jan 2024\" \"09 Jan 2024\" \"10 Jan 2024\"\n[11] \"11 Jan 2024\" \"12 Jan 2024\" \"13 Jan 2024\" \"14 Jan 2024\" \"15 Jan 2024\"\n[16] \"16 Jan 2024\" \"17 Jan 2024\" \"18 Jan 2024\" \"19 Jan 2024\" \"20 Jan 2024\"\n[21] \"21 Jan 2024\" \"22 Jan 2024\" \"23 Jan 2024\" \"24 Jan 2024\" \"25 Jan 2024\"\n[26] \"26 Jan 2024\" \"27 Jan 2024\" \"28 Jan 2024\" \"29 Jan 2024\" \"30 Jan 2024\"\n[31] \"31 Jan 2024\" \"01 Feb 2024\" \"02 Feb 2024\" \"03 Feb 2024\" \"04 Feb 2024\"\n[36] \"05 Feb 2024\" \"06 Feb 2024\" \"07 Feb 2024\" \"08 Feb 2024\" \"09 Feb 2024\"\n[41] \"10 Feb 2024\" \"12 Feb 2024\" \"13 Feb 2024\" \"14 Feb 2024\" \"15 Feb 2024\"\n[46] \"16 Feb 2024\" \"17 Feb 2024\" \"18 Feb 2024\" \"19 Feb 2024\" \"20 Feb 2024\"\n[51] \"21 Feb 2024\" \"22 Feb 2024\" \"23 Feb 2024\" \"24 Feb 2024\" \"25 Feb 2024\"\n[56] \"26 Feb 2024\" \"27 Feb 2024\" \"28 Feb 2024\" \"29 Feb 2024\" \"01 Mar 2024\"\n[61] \"02 Mar 2024\" \"03 Mar 2024\" \"04 Mar 2024\" \"05 Mar 2024\" \"06 Mar 2024\"\n[66] \"07 Mar 2024\" \"08 Mar 2024\" \"09 Mar 2024\" \"10 Mar 2024\" \"11 Mar 2024\"\n[71] \"12 Mar 2024\" \"13 Mar 2024\" \"14 Mar 2024\" \"15 Mar 2024\" \"16 Mar 2024\"\n[76] \"17 Mar 2024\" \"18 Mar 2024\" \"19 Mar 2024\" \"20 Mar 2024\" \"21 Mar 2024\"\n[81] \"22 Mar 2024\" \"23 Mar 2024\" \"24 Mar 2024\" \"25 Mar 2024\" \"26 Mar 2024\"\n[86] \"27 Mar 2024\" \"28 Mar 2024\" \"29 Mar 2024\" \"30 Mar 2024\" \"31 Mar 2024\"\n\n# Convert Sale Date to Date format\nds1$`Sale Date` &lt;- dmy(ds1$`Sale Date`)\n\n# Extract month from Sale Date\nds1$Month &lt;- month(ds1$`Sale Date`, label = TRUE)\n\n# Create a histogram for Sale Date by month\nggplot(ds1, aes(x = Month)) +\n  geom_bar(fill = \"skyblue\", color = \"black\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sales by Month\",\n    x = \"Month\",\n    y = \"Count\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  }
]