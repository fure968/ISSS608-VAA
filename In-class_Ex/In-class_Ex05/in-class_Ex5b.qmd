---
title: "In Class Exercise 5b"
subtitle: " "
author: "Guan Jhen Lin"
date: "May 11 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

We will use jsonlite package to read the files for JSON files. Vast challenge 2024's dataset will be used for this in class exercise.

```{r}
pacman::p_load(tidyverse, jsonlite,dplyr)
```

```{r}
# Specify the path to your JSON file
file_path <- "data/mc3.json"

# Read the file as lines of text
json_data <- readLines(file_path, warn = FALSE)
json_string <- paste(json_data, collapse = "")
# Replace 'NaN' with 'null' in the JSON string
json_string <- gsub("NaN", "null", json_string)
# Parse the JSON string
json_list <- fromJSON(json_string)

# Now json_list is a usable R list that you can work with
# Check the structure of the list
str(json_list)

# Summary of the list for a quick overview
summary(json_list)
# Example: Replacing null values in a specific field
json_list$PointOfContact <- ifelse(is.null(json_list$PointOfContact), "No Contact", json_list$PointOfContact)
mc3_data <- fromJSON(json_string)
```

```{r}
mc1_data <-fromJSON("data/mc1.json")
mc2_data <-fromJSON("data/mc2.json")

#graph data model
#you may apply this to MC2, MC3 as well
#refer to MC1 Data Description for the data meanings. 
#MC3 is bit corrupted please artificially fill in something before run 
```

```{r}
summary(mc1_data)
summary(mc2_data)
summary(mc3_data)
```

```{r}
library(dplyr)
library(ggplot2)
library(shiny)

# Load data (assuming the data has been read into mc3)
nodes <- as_tibble(mc2_data$nodes)
links <- as_tibble(mc2_data$links) %>%
  distinct() %>%
  mutate(across(c(source, target, type), as.character)) %>%
  group_by(source, target, type) %>%
  summarise(weights = n(), .groups = 'drop') %>%
  filter(source != target) %>%
  select(-weights)

# Separate nodes by type and select relevant columns
vessels <- nodes %>%
  filter(type == "Entity.Vessel") %>%
  select(id, name, company, flag_country, length_overall, tonnage) %>%
  mutate(across(everything(), as.character))

locations <- nodes %>%
  filter(type == "Entity.Location") %>%
  select(id, name, activities, description, fish_species_present, kind) %>%
  mutate(across(everything(), as.character))

fish <- nodes %>%
  filter(type == "Entity.Commodity.Fish") %>%
  select(id, name) %>%
  mutate(across(everything(), as.character))

delivery_reports <- nodes %>%
  filter(type == "Entity.Document.DeliveryReport") %>%
  select(id, description) %>%
  mutate(across(everything(), as.character))


```


