---
title: "Take Home Exercise 1"
subtitle: "Creating data visualisation beyond default"
author: "Guan Jhen Lin"
date: "Apr 21, 2024"
date-modified: "Apr 13, 2024"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---


# Introduction

In Singapore, the residential property market is divided into public and private sectors. Public housing caters to households with a monthly income of less than or equal to S\$14,000, aiming to provide affordable housing for the general populace. Conversely, the private housing market serves households with incomes exceeding S\$14,000.

For this exercise, we'll be utilizing REALIS transaction data spanning from 1st January 2023 to 31st March 2024 and explore the data sets using ggplot2 and its extensions.

# Setting the Scenes

We will be assuming the role of a graphical editor of a media company and had been requested to prepare two to three data visualization to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.

# Data Preparation

Load R Packages


```{r}
pacman::p_load(tidyverse, haven,
               ggrepel, ggthemes,
               ggridges, ggdist,
               patchwork, scales)
pacman::p_load(HH, tidyverse)
```


Import the 5 data sets


```{r}
ds1 <- read_csv("data/ds1.csv")
ds2 <- read_csv("data/ds2.csv")
ds3 <- read_csv("data/ds3.csv")
ds4 <- read_csv("data/ds4.csv")
ds5 <- read_csv("data/ds5.csv")
```


Missing values had been removed to prevent parsing issues, to ensure that the data types matches the actual data some columns had been converted. Sale Date and Completion Date columns had been changed to as.Date format and Type of Sale, Property Type had been changed from char to factor data type.

For numeric columns, remove any non-numeric characters or replace them with appropriate values. For categorical columns, ensure consistent naming and handle any inconsistent or misspelled categories. After cleaning, validate the data to ensure that all inconsistencies and anomalies have been addressed.

The process had been repeated for all five data sets.

::: panel-tabset
## ds1


```{r}
colSums(is.na(ds1))
ds1 <- na.omit(ds1)

ds1$`Type of Sale` <- as.factor(ds1$`Type of Sale`)
ds1$`Property Type` <- as.factor(ds1$`Property Type`)
ds1$`Transacted Price ($)` <- as.numeric(gsub("[^0-9.]", "", ds1$`Transacted Price ($)`, perl = TRUE))
ds1$`Area (SQFT)` <- as.numeric(gsub("[^0-9.]", "", ds1$`Area (SQFT)`, perl = TRUE))
ds1$`Type of Sale` <- tolower(ds1$`Type of Sale`)
ds1$`Type of Sale` <- ifelse(ds1$`Type of Sale` %in% c("new sale", "resale"), ds1$`Type of Sale`, "other")
```


## ds2


```{r}
colSums(is.na(ds2))
ds2 <- na.omit(ds2)

ds2$`Type of Sale` <- as.factor(ds2$`Type of Sale`)
ds2$`Property Type` <- as.factor(ds2$`Property Type`)
ds2$`Transacted Price ($)` <- as.numeric(gsub("[^0-9.]", "", ds2$`Transacted Price ($)`, perl = TRUE))
ds2$`Area (SQFT)` <- as.numeric(gsub("[^0-9.]", "", ds2$`Area (SQFT)`, perl = TRUE))
ds2$`Type of Sale` <- tolower(ds2$`Type of Sale`)
ds2$`Type of Sale` <- ifelse(ds2$`Type of Sale` %in% c("new sale", "resale"), ds2$`Type of Sale`, "other")
```


## ds3


```{r}
colSums(is.na(ds3))
ds3 <- na.omit(ds3)

ds3$`Type of Sale` <- as.factor(ds3$`Type of Sale`)
ds3$`Property Type` <- as.factor(ds3$`Property Type`)
ds3$`Transacted Price ($)` <- as.numeric(gsub("[^0-9.]", "", ds3$`Transacted Price ($)`, perl = TRUE))
ds3$`Area (SQFT)` <- as.numeric(gsub("[^0-9.]", "", ds3$`Area (SQFT)`, perl = TRUE))
ds3$`Type of Sale` <- tolower(ds3$`Type of Sale`)
ds3$`Type of Sale` <- ifelse(ds3$`Type of Sale` %in% c("new sale", "resale"), ds3$`Type of Sale`, "other")
```


## ds4


```{r}
colSums(is.na(ds4))
ds4 <- na.omit(ds4)

ds4$`Type of Sale` <- as.factor(ds4$`Type of Sale`)
ds4$`Property Type` <- as.factor(ds4$`Property Type`)
ds4$`Transacted Price ($)` <- as.numeric(gsub("[^0-9.]", "", ds4$`Transacted Price ($)`, perl = TRUE))
ds4$`Area (SQFT)` <- as.numeric(gsub("[^0-9.]", "", ds4$`Area (SQFT)`, perl = TRUE))
ds4$`Type of Sale` <- tolower(ds4$`Type of Sale`)
ds4$`Type of Sale` <- ifelse(ds4$`Type of Sale` %in% c("new sale", "resale"), ds4$`Type of Sale`, "other")
```


## ds5


```{r}
colSums(is.na(ds5))
ds5 <- na.omit(ds5)

ds5$`Type of Sale` <- as.factor(ds5$`Type of Sale`)
ds5$`Property Type` <- as.factor(ds5$`Property Type`)
ds5$`Transacted Price ($)` <- as.numeric(gsub("[^0-9.]", "", ds5$`Transacted Price ($)`, perl = TRUE))
ds5$`Area (SQFT)` <- as.numeric(gsub("[^0-9.]", "", ds5$`Area (SQFT)`, perl = TRUE))
ds5$`Type of Sale` <- tolower(ds5$`Type of Sale`)
ds5$`Type of Sale` <- ifelse(ds5$`Type of Sale` %in% c("new sale", "resale"), ds5$`Type of Sale`, "other")
```

:::

# EDA 1 Exploring relationship between planning area and unit price (\$psf)

We have four charts depicting unit price (\$ psf) to planning regions in Singapore through 2023 according to the 4 different quarters. By comparing the graphs, we can see the regional price variations in different quarters of the year.

Central Region show the highest median PSF throughout the year, indicating its status as a premium location. North East Region and East Region have stable PSF values, offering a balance between affordability and location.

<details>

<summary>Click to show code</summary>


```{r}
library(ggplot2)
library(cowplot)

# Price per Square Foot by Planning Region in DS2
q4 <- ggplot(ds2, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +
  geom_boxplot() +
  labs(title = "Price per Square Foot by Planning Region - Oct 23 - Dec 23",
       x = "Planning Region",
       y = "Unit Price ($ PSF)") +
  theme(text = element_text(size = 6)) 

# Price per Square Foot by Planning Region in DS3
q3 <- ggplot(ds3, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +
  geom_boxplot() +
  labs(title = "Price per Square Foot by Planning Region - Jul 23 - Sep 23",
       x = "Planning Region",
       y = "Unit Price ($ PSF)") +
  theme(text = element_text(size = 6)) 

# Price per Square Foot by Planning Region in DS4
q2 <- ggplot(ds4, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +
  geom_boxplot() +
  labs(title = "Price per Square Foot by Planning Region - Apr 23 - Jun 23",
       x = "Planning Region",
       y = "Unit Price ($ PSF)") +
  theme(text = element_text(size = 6)) 

# Price per Square Foot by Planning Region in DS5
q1 <- ggplot(ds5, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +
  geom_boxplot() +
  labs(title = "Price per Square Foot by Planning Region - Jan 23 - Mar 23",
       x = "Planning Region",
       y = "Unit Price ($ PSF)") +
  theme(text = element_text(size = 6)) 
```


</summary>

</details>

Combined the plots


```{r}
# Combine the plots using wrap_plots
combined_plot <- wrap_plots(q1, q2, q3, q4, ncol = 2)
# Display the combined plot
combined_plot
```


Next, we combined the data sets and see the graph from 2023 Q1 - Q4 boxplot.


```{r}
# Load required libraries
library(dplyr)
library(ggplot2)
library(plotly)

# Combine the datasets into a single dataset
combined_ds <- bind_rows(
  ds1 %>% mutate(Data_Source = "data/ds1.csv"),
  ds2 %>% mutate(Data_Source = "data/ds2.csv"),
  ds3 %>% mutate(Data_Source = "data/ds3.csv"),
  ds4 %>% mutate(Data_Source = "data/ds4.csv"),
  ds5 %>% mutate(Data_Source = "data/ds5.csv"),
)

# Calculate median and IQR by Planning Region
summary_stats <- combined_ds %>%
  group_by(`Planning Region`) %>%
  summarise(
    median_PSF = median(`Unit Price ($ PSF)`, na.rm = TRUE),
    lower_quartile = quantile(`Unit Price ($ PSF)`, 0.25, na.rm = TRUE),
    upper_quartile = quantile(`Unit Price ($ PSF)`, 0.75, na.rm = TRUE)
  )

# Create a boxplot for Price per Square Foot by Planning Region
p <- ggplot(combined_ds, aes(x = `Planning Region`, y = `Unit Price ($ PSF)`)) +
  geom_boxplot() +
  stat_summary(
    fun = median,
    geom = "point",
    shape = 23,
    size = 3,
    color = "blue",
    position = position_dodge(width = 0.75)
  ) +
  labs(
    title = "Distribution of Price per Square Foot by Planning Region - 2023 Q1-Q4",
    x = "Planning Region",
    y = "Unit Price ($ PSF)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert ggplot to plotly object for interactivity
p_plotly <- ggplotly(p, tooltip = c("Planning Region", "y", "Data_Source", "median_PSF", "lower_quartile", "upper_quartile"))

# Convert ggplot to plotly object for interactivity
p_plotly <- plotly::ggplotly(p, tooltip = c("Planning Region", "y", "Data_Source", "median_PSF", "lower_quartile", "upper_quartile"))
```

```{r}
# Display the interactive plot
p_plotly

```


::: {.focusbox .focus data-latex="focus"}
#\*Insights from Visualisations\*\* -xx - xx - xx
:::

# EDA 2

```{r}
# Load required libraries
library(dplyr)
library(lubridate)
library(ggplot2)

# Check unique values in Sale Date
unique(ds1$`Sale Date`)

# Convert Sale Date to Date format
ds1$`Sale Date` <- dmy(ds1$`Sale Date`)

# Extract month from Sale Date
ds1$Month <- month(ds1$`Sale Date`, label = TRUE)

# Create a histogram for Sale Date by month
ggplot(ds1, aes(x = Month)) +
  geom_bar(fill = "skyblue", color = "black", alpha = 0.7) +
  labs(
    title = "Distribution of Transactions by Month",
    x = "Month",
    y = "Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

